// Function to find the first and last occurrence of a specific weekday
function findWeekdayInRange(start, end, targetDay) {
    const daysOfWeek = ["su", "mo", "tu", "we", "th", "fr", "sa"];
    const targetIndex = daysOfWeek.indexOf(targetDay.toLowerCase());

    if (targetIndex === -1) {
        throw new Error("Invalid weekday: " + targetDay);
    }

    let firstOccurrence = new Date(start);
    while (firstOccurrence.getDay() !== targetIndex) {
        firstOccurrence.setDate(firstOccurrence.getDate() + 1);
    }

    let lastOccurrence = new Date(end);
    while (lastOccurrence.getDay() !== targetIndex) {
        lastOccurrence.setDate(lastOccurrence.getDate() - 1);
    }

    return { firstOccurrence, lastOccurrence };
}

// Utility function to convert a Date object to 'MM/DD/YYYY' format
// needed for the ics.js library requirements
function formatDateToMMDDYYYY(date) {
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const day = date.getDate().toString().padStart(2, '0');
    const year = date.getFullYear();
    return `${month}/${day}/${year}`;
}

// takes in calendar object and generates ICS file content
// calendar object format: from getTableValuesIntoObject() from bcs.js
function generateICS(calendarObj, startSemester="08/19/2025", endSemester="12/20/2025"){ // startSemester, endSemester in "MM/DD/YYYY" format
    if(typeof calendarObj !== "object"){
        console.error("Invalid calendar object");
        return;
    }
    // Convert startSemester and endSemester strings into JavaScript Date objects
    const startSemesterDate = new Date(startSemester);
    const endSemesterDate = new Date(endSemester);

    var calendar = ics();
   //  alert(JSON.stringify(calendarObj, null, 2)); // --- IGNORE ---
    delete calendarObj["Class Title"]; // remove header row if present
    for(const className in calendarObj){
        // alert(className)
        const sessions = calendarObj[className];
       // alert(JSON.stringify(sessions, null, 2)); // --- IGNORE ---
        const dayArr = []; // use this to find first and last day of class (if class happens on different days)
        for(const session of sessions){
            const days = session.day; // array of days in ICSDAYS format
            for (day of days){
                dayArr.push(findWeekdayInRange(startSemesterDate, endSemesterDate, day));
            }
            const firstDay = dayArr.reduce((earliest, current) => {
                return current.firstOccurrence < earliest.firstOccurrence ? current : earliest;
            }, dayArr[0])?.firstOccurrence;
            const lastDay = dayArr.reduce((latest, current) => {
                return current.lastOccurrence > latest.lastOccurrence ? current : latest;
            }, dayArr[0])?.lastOccurrence;

            
            const location = session.location || "TBA";
            const startTime = session.startTime.replace("am", " am").replace("pm", " pm") || "6:00 pm";
            const endTime = session.endTime.replace("am", " am").replace("pm", " pm") || "7:00 pm";
            const type = session.type || "lecture";
            eventName = `${className} (${type})`;
          //  alert()
            calendar.addEvent(eventName, "auto-generated by Berkeley Class Loader.", 
                location, `${formatDateToMMDDYYYY(firstDay)} ${startTime}`, 
                `${formatDateToMMDDYYYY(firstDay)} ${endTime}`, rrule={freq: "WEEKLY", until: formatDateToMMDDYYYY(lastDay), byday: days.map(d => d.toUpperCase())} );
            
        }
    }
    calendar.download("import_this_into_calendar");

    

    // Example usage
}


